// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// NextAuth.js Models
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// Application Models
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  role          UserRole  @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  provider  Provider?
  reviews   Review[]
  purchases Transaction[] @relation("Buyer")

  @@index([email])
  @@index([role])
}

model Provider {
  id                 String             @id @default(cuid())
  userId             String             @unique
  companyName        String
  description        String?            @db.Text
  website            String?
  phone              String?
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  commissionRate     Float              @default(0.10)
  verificationStatus VerificationStatus @default(PENDING)

  // Stripe Connect
  stripeAccountId String?  @unique
  stripeOnboarded Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  services      Service[]
  subscriptions Subscription[]
  sales         Transaction[]  @relation("Seller")

  @@index([userId])
  @@index([subscriptionPlan])
  @@index([verificationStatus])
  @@index([stripeAccountId])
}

model Service {
  id              String          @id @default(cuid())
  providerId      String
  category        ServiceCategory
  title           String
  description     String          @db.Text
  price           Float
  currency        String          @default("USD")

  // Location
  country     String
  countryCode String

  // Features
  features       Json // Array of features
  processingTime String?
  requirements   Json? // Array of requirements

  // Visibility
  status     ServiceStatus @default(DRAFT)
  isPromoted Boolean       @default(false)

  // SEO
  slug            String  @unique
  metaTitle       String?
  metaDescription String?

  // Stats
  viewCount     Int @default(0)
  purchaseCount Int @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  provider     Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  reviews      Review[]
  promotion    Promotion?

  @@index([providerId])
  @@index([category])
  @@index([country])
  @@index([status])
  @@index([isPromoted])
  @@index([slug])
}

model Transaction {
  id String @id @default(cuid())

  serviceId String
  buyerId   String
  sellerId  String

  // Amounts
  amount           Float
  commissionAmount Float
  commissionRate   Float
  sellerAmount     Float
  currency         String @default("USD")

  // Stripe
  stripePaymentIntentId String  @unique
  stripeTransferId      String? @unique

  // Status
  status TransactionStatus @default(PENDING)

  // Metadata
  metadata Json?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  service Service  @relation(fields: [serviceId], references: [id])
  buyer   User     @relation("Buyer", fields: [buyerId], references: [id])
  seller  Provider @relation("Seller", fields: [sellerId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@index([serviceId])
  @@index([status])
  @@index([createdAt])
  @@index([stripePaymentIntentId])
}

model Subscription {
  id         String         @id @default(cuid())
  providerId String
  plan       SubscriptionPlan

  // Stripe
  stripeSubscriptionId String @unique
  stripePriceId        String
  stripeCustomerId     String

  // Status
  status SubscriptionStatus @default(ACTIVE)

  // Billing
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([status])
  @@index([stripeSubscriptionId])
}

model Promotion {
  id        String          @id @default(cuid())
  serviceId String          @unique
  category  ServiceCategory
  pricePaid Float

  startDate DateTime @default(now())
  expiresAt DateTime
  isActive  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([category])
  @@index([expiresAt])
  @@index([isActive])
}

model Review {
  id        String @id @default(cuid())
  serviceId String
  userId    String

  rating  Int
  comment String? @db.Text

  // Moderation
  status ReviewStatus @default(PUBLISHED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([serviceId, userId])
  @@index([serviceId])
  @@index([userId])
  @@index([rating])
}

// ============================================
// Enums
// ============================================

enum UserRole {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  VERIFIED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ServiceCategory {
  CITIZENSHIP
  RESIDENCY
  COMPANY_INCORPORATION
  BANKING
  INSURANCE
  SHIPPING
}

enum ServiceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  UNDER_REVIEW
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  TRIALING
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
}
